#   p("AST: Assists"),
#   p("ONTA: On Target Attempts"),
#   p("OFTA: Off Target Attempts"),
#   p("AIPA: Attempts Inside the Penalty Area"),
#   p("AOPA: Attempts Outside the Penalty Area"),
#   p("LC: Left Channel"),
#   p("LIC: Left Inside Channel"),
#   p("CC: Central Channel"),
#   p("RIC: Right Inside Channel"),
#   p("RC: Right Channel"),
#   p("TOR: Total Offers to Receive"),
#   p("IHOR: Inbehind Offers to Receive"),
#   p("IWOR: Inbetween Offer To Receive"),
#   p("IFOR: Infront Offers to Receive"),
#   p("RBMD: Receptions Between Midfield and Defensive Lines"),
#   p("ALB: Attempted Line Breaks"),
#   p("CLB: Completed Line Breaks"),
#   p("ADLB: Attempted Defensive Line Breaks"),
#   p("CDLB: Completed Defensive Line Breaks"),
#   p("YC: Yellow Cards"),
#   p("RDC: Red Cards"),
#   p("FA: Fouls Against Team"),
#   p("OFF: Offsides"),
#   p("PAS: Passes"),
#   p("PASC: Passes Completed"),
#   p("CRO: Crosses"),
#   p("CROC: Crosses Completed"),
#   p("SWOP: Switches of Play Completed"),
#   p("COR: Corners"),
#   p("FK: Free Kicks"),
#   p("PS: Penalties Scored"),
#   p("GP: Goal Preventions"),
#   p("FT: Forced Turnovers"),
#   p("DPA: Defensive Pressures Applied"))
#   )
#   )
# ),
fluidRow(
ui <- shinyUI(
navbarPage(
"2023 FIFA World Team Analysis",
tabPanel(
"EDA",
fluidRow(
column(
width = 3,
sidebarPanel(
width = 12,
selectInput(
"team",
"Choose a team:",
choices = sort(unique(dfTeams$team.name))
),
actionButton(
"generate_graphic",
"Generate Graphic",
class = "btn-primary"
)
)
),
column(
width = 5,
plotlyOutput("plot", width = "600px", height = "500px")
),
fluidRow(
column(
width = 8,
tableOutput("table"), style = "overflow-x: scroll"
)
),
tabPanel("Index",
p("DESCRIPTION"),
p("The abbreviations used in the polar plot are:"),
p("POS: Possession"),
p("ATT: Total Attempts"),
p("GIPA: Goals Inside the Penalty Area"),
p("GOPA: Goals Outside the Penalty Area"),
p("AST: Assists"),
p("ONTA: On Target Attempts"),
p("OFTA: Off Target Attempts"),
p("AIPA: Attempts Inside the Penalty Area"),
p("AOPA: Attempts Outside the Penalty Area"),
p("LC: Left Channel"),
p("LIC: Left Inside Channel"),
p("CC: Central Channel"),
p("RIC: Right Inside Channel"),
p("RC: Right Channel"),
p("TOR: Total Offers to Receive"),
p("IHOR: Inbehind Offers to Receive"),
p("IWOR: Inbetween Offer To Receive"),
p("IFOR: Infront Offers to Receive"),
p("RBMD: Receptions Between Midfield and Defensive Lines"),
p("ALB: Attempted Line Breaks"),
p("CLB: Completed Line Breaks"),
p("ADLB: Attempted Defensive Line Breaks"),
p("CDLB: Completed Defensive Line Breaks"),
p("YC: Yellow Cards"),
p("RC: Red Cards"),
p("FA: Fouls Against Team"),
p("OFF: Offsides"),
p("PAS: Passes"),
p("PASC: Passes Completed"),
p("CRO: Crosses"),
p("CROC: Crosses Completed"),
p("SWOP: Switches of Play Completed"),
p("COR:Corners"),
p("FK: Free Kicks"),
p("PS: Penalties Scored"),
p("GP: Goal Preventions"),
p("FT: Forced Turnovers"),
p("DPA: Defensive Pressures Applied")
))
))
#  column(
#     width = 4,
#   div(style = "height = 100%; overflow-y: scroll",
#       p("The abbreviations used in the polar plot are:", style = "font-size:20px"),
#   p("POS: Possession"),
#   p("ATT: Total Attempts"),
#   p("GIPA: Goals Inside the Penalty Area"),
#   p("GOPA: Goals Outside the Penalty Area"),
#   p("AST: Assists"),
#   p("ONTA: On Target Attempts"),
#   p("OFTA: Off Target Attempts"),
#   p("AIPA: Attempts Inside the Penalty Area"),
#   p("AOPA: Attempts Outside the Penalty Area"),
#   p("LC: Left Channel"),
#   p("LIC: Left Inside Channel"),
#   p("CC: Central Channel"),
#   p("RIC: Right Inside Channel"),
#   p("RC: Right Channel"),
#   p("TOR: Total Offers to Receive"),
#   p("IHOR: Inbehind Offers to Receive"),
#   p("IWOR: Inbetween Offer To Receive"),
#   p("IFOR: Infront Offers to Receive"),
#   p("RBMD: Receptions Between Midfield and Defensive Lines"),
#   p("ALB: Attempted Line Breaks"),
#   p("CLB: Completed Line Breaks"),
#   p("ADLB: Attempted Defensive Line Breaks"),
#   p("CDLB: Completed Defensive Line Breaks"),
#   p("YC: Yellow Cards"),
#   p("RDC: Red Cards"),
#   p("FA: Fouls Against Team"),
#   p("OFF: Offsides"),
#   p("PAS: Passes"),
#   p("PASC: Passes Completed"),
#   p("CRO: Crosses"),
#   p("CROC: Crosses Completed"),
#   p("SWOP: Switches of Play Completed"),
#   p("COR: Corners"),
#   p("FK: Free Kicks"),
#   p("PS: Penalties Scored"),
#   p("GP: Goal Preventions"),
#   p("FT: Forced Turnovers"),
#   p("DPA: Defensive Pressures Applied"))
#   )
#   )
# ),
)
shinyApp(ui, server)
ui <- shinyUI(
navbarPage(
"2023 FIFA World Team Analysis",
tabPanel(
"EDA",
fluidRow(
column(
width = 3,
sidebarPanel(
width = 12,
selectInput(
"team",
"Choose a team:",
choices = sort(unique(dfTeams$team.name))
),
actionButton(
"generate_graphic",
"Generate Graphic",
class = "btn-primary"
)
)
),
column(
width = 5,
plotlyOutput("plot", width = "600px", height = "500px")
),
fluidRow(
column(
width = 8,
tableOutput("table"), style = "overflow-x: scroll"
)
))),
tabPanel("Index",
p("DESCRIPTION"),
p("The abbreviations used in the polar plot are:"),
p("POS: Possession"),
p("ATT: Total Attempts"),
p("GIPA: Goals Inside the Penalty Area"),
p("GOPA: Goals Outside the Penalty Area"),
p("AST: Assists"),
p("ONTA: On Target Attempts"),
p("OFTA: Off Target Attempts"),
p("AIPA: Attempts Inside the Penalty Area"),
p("AOPA: Attempts Outside the Penalty Area"),
p("LC: Left Channel"),
p("LIC: Left Inside Channel"),
p("CC: Central Channel"),
p("RIC: Right Inside Channel"),
p("RC: Right Channel"),
p("TOR: Total Offers to Receive"),
p("IHOR: Inbehind Offers to Receive"),
p("IWOR: Inbetween Offer To Receive"),
p("IFOR: Infront Offers to Receive"),
p("RBMD: Receptions Between Midfield and Defensive Lines"),
p("ALB: Attempted Line Breaks"),
p("CLB: Completed Line Breaks"),
p("ADLB: Attempted Defensive Line Breaks"),
p("CDLB: Completed Defensive Line Breaks"),
p("YC: Yellow Cards"),
p("RC: Red Cards"),
p("FA: Fouls Against Team"),
p("OFF: Offsides"),
p("PAS: Passes"),
p("PASC: Passes Completed"),
p("CRO: Crosses"),
p("CROC: Crosses Completed"),
p("SWOP: Switches of Play Completed"),
p("COR:Corners"),
p("FK: Free Kicks"),
p("PS: Penalties Scored"),
p("GP: Goal Preventions"),
p("FT: Forced Turnovers"),
p("DPA: Defensive Pressures Applied")
)))
#  column(
#     width = 4,
#   div(style = "height = 100%; overflow-y: scroll",
#       p("The abbreviations used in the polar plot are:", style = "font-size:20px"),
#   p("POS: Possession"),
#   p("ATT: Total Attempts"),
#   p("GIPA: Goals Inside the Penalty Area"),
#   p("GOPA: Goals Outside the Penalty Area"),
#   p("AST: Assists"),
#   p("ONTA: On Target Attempts"),
#   p("OFTA: Off Target Attempts"),
#   p("AIPA: Attempts Inside the Penalty Area"),
#   p("AOPA: Attempts Outside the Penalty Area"),
#   p("LC: Left Channel"),
#   p("LIC: Left Inside Channel"),
#   p("CC: Central Channel"),
#   p("RIC: Right Inside Channel"),
#   p("RC: Right Channel"),
#   p("TOR: Total Offers to Receive"),
#   p("IHOR: Inbehind Offers to Receive"),
#   p("IWOR: Inbetween Offer To Receive"),
#   p("IFOR: Infront Offers to Receive"),
#   p("RBMD: Receptions Between Midfield and Defensive Lines"),
#   p("ALB: Attempted Line Breaks"),
#   p("CLB: Completed Line Breaks"),
#   p("ADLB: Attempted Defensive Line Breaks"),
#   p("CDLB: Completed Defensive Line Breaks"),
#   p("YC: Yellow Cards"),
#   p("RDC: Red Cards"),
#   p("FA: Fouls Against Team"),
#   p("OFF: Offsides"),
#   p("PAS: Passes"),
#   p("PASC: Passes Completed"),
#   p("CRO: Crosses"),
#   p("CROC: Crosses Completed"),
#   p("SWOP: Switches of Play Completed"),
#   p("COR: Corners"),
#   p("FK: Free Kicks"),
#   p("PS: Penalties Scored"),
#   p("GP: Goal Preventions"),
#   p("FT: Forced Turnovers"),
#   p("DPA: Defensive Pressures Applied"))
#   )
#   )
# ),
shinyApp(ui, server)
ui <- shinyUI(
navbarPage(
"2023 FIFA World Team Analysis",
tabPanel(
"EDA",
fluidRow(
column(
width = 3,
sidebarPanel(
width = 12,
selectInput(
"team",
"Choose a team:",
choices = sort(unique(dfTeams$team.name))
),
actionButton(
"generate_graphic",
"Generate Graphic",
class = "btn-primary"
)
)
),
column(
width = 5,
plotlyOutput("plot", width = "600px", height = "500px")
),
fluidRow(
column(
width = 8,
tableOutput("table"), style = "overflow-x: scroll"
)
))),
tabPanel("Index",
p("The abbreviations used in the polar plot are:",style = "font-size:25px"),
p("POS: Possession"),
p("ATT: Total Attempts"),
p("GIPA: Goals Inside the Penalty Area"),
p("GOPA: Goals Outside the Penalty Area"),
p("AST: Assists"),
p("ONTA: On Target Attempts"),
p("OFTA: Off Target Attempts"),
p("AIPA: Attempts Inside the Penalty Area"),
p("AOPA: Attempts Outside the Penalty Area"),
p("LC: Left Channel"),
p("LIC: Left Inside Channel"),
p("CC: Central Channel"),
p("RIC: Right Inside Channel"),
p("RC: Right Channel"),
p("TOR: Total Offers to Receive"),
p("IHOR: Inbehind Offers to Receive"),
p("IWOR: Inbetween Offer To Receive"),
p("IFOR: Infront Offers to Receive"),
p("RBMD: Receptions Between Midfield and Defensive Lines"),
p("ALB: Attempted Line Breaks"),
p("CLB: Completed Line Breaks"),
p("ADLB: Attempted Defensive Line Breaks"),
p("CDLB: Completed Defensive Line Breaks"),
p("YC: Yellow Cards"),
p("RC: Red Cards"),
p("FA: Fouls Against Team"),
p("OFF: Offsides"),
p("PAS: Passes"),
p("PASC: Passes Completed"),
p("CRO: Crosses"),
p("CROC: Crosses Completed"),
p("SWOP: Switches of Play Completed"),
p("COR:Corners"),
p("FK: Free Kicks"),
p("PS: Penalties Scored"),
p("GP: Goal Preventions"),
p("FT: Forced Turnovers"),
p("DPA: Defensive Pressures Applied")
)))
shinyApp(ui, server)
setwd("C:/Users/rlant/OneDrive - oakland.edu/Winter_2023/MIS_4470/FIFAProject")
library(shiny)
library(shinydashboard)
library(plotly)
library(dplyr)
ui <- shinyUI(
navbarPage(
"2023 FIFA World Team Analysis",
tabPanel(
"EDA",
fluidRow(
column(
width = 3,
sidebarPanel(
width = 12,
selectInput(
"team",
"Choose a team:",
choices = sort(unique(dfTeams$team.name))
),
actionButton(
"generate_graphic",
"Generate Graphic",
class = "btn-primary"
)
)
),
column(
width = 5,
plotlyOutput("plot", width = "600px", height = "500px")
),
fluidRow(
column(
width = 8,
tableOutput("table"), style = "overflow-x: scroll"
)
))),
tabPanel("Index",
p("The abbreviations used in the polar plot are:",style = "font-size:25px"),
p("POS: Possession"),
p("ATT: Total Attempts"),
p("GIPA: Goals Inside the Penalty Area"),
p("GOPA: Goals Outside the Penalty Area"),
p("AST: Assists"),
p("ONTA: On Target Attempts"),
p("OFTA: Off Target Attempts"),
p("AIPA: Attempts Inside the Penalty Area"),
p("AOPA: Attempts Outside the Penalty Area"),
p("LC: Left Channel"),
p("LIC: Left Inside Channel"),
p("CC: Central Channel"),
p("RIC: Right Inside Channel"),
p("RC: Right Channel"),
p("TOR: Total Offers to Receive"),
p("IHOR: Inbehind Offers to Receive"),
p("IWOR: Inbetween Offer To Receive"),
p("IFOR: Infront Offers to Receive"),
p("RBMD: Receptions Between Midfield and Defensive Lines"),
p("ALB: Attempted Line Breaks"),
p("CLB: Completed Line Breaks"),
p("ADLB: Attempted Defensive Line Breaks"),
p("CDLB: Completed Defensive Line Breaks"),
p("YC: Yellow Cards"),
p("RC: Red Cards"),
p("FA: Fouls Against Team"),
p("OFF: Offsides"),
p("PAS: Passes"),
p("PASC: Passes Completed"),
p("CRO: Crosses"),
p("CROC: Crosses Completed"),
p("SWOP: Switches of Play Completed"),
p("COR:Corners"),
p("FK: Free Kicks"),
p("PS: Penalties Scored"),
p("GP: Goal Preventions"),
p("FT: Forced Turnovers"),
p("DPA: Defensive Pressures Applied")
)))
#define function to scale values between 0 and 1
scale_values <- function(x){(x-min(x))/(max(x)-min(x))}
dfScaledTeams <-
dfTeams %>%
mutate_at(-c(1,2,4,6,41,44), ~(scale_values(.)))
server <- function(input, output) {
# get data based on team
teamData <- reactive({
dfScaledTeams %>%
filter(team.name == input$team) %>%
select(-c(1,2,4,6,41))
})
teamData_won <- reactive({
teamData() %>%
filter(result == "1")
})
teamData_lost <- reactive({
teamData() %>%
filter(result == "0")
})
won <- reactive({
teamData_won() %>%
summarise_if(is.numeric,mean)
})
lost <- reactive({
teamData_lost() %>%
summarise_if(is.numeric,mean)
})
output$table <- renderTable({
# create a data frame with new row names
table_data <- data.frame(
Wins = as.numeric(won()),
Losses = as.numeric(lost()),
Difference = as.numeric(abs(won()-lost()))
)
rownames(table_data) <- c("POS", "ATT", "GIPA", "GOPA", "AST", "ONTA", "OFTA",
"AIPA", "AOPA", "LC", "LIC", "CC", "RIC", "RC", "TOR",
"IHOR", "IWOR", "IFOR", "RBMD", "ALB", "CLB", "ADLB",
"CDLB", "YC", "RDC", "FA", "OFF", "PAS", "PASC", "CRO",
"CROC", "SWOP", "COR", "FK", "PS", "GP", "FT", "DPA")
# transpose the data frame to create a tabular table
table_data <- table_data[order(-table_data$Difference),]
t(table_data)
}, rownames = TRUE, colnames = TRUE)
output$plot <- renderPlotly( {
plot_ly(
type = 'scatterpolar', mode = 'lines', fill = 'toself'
) %>%
add_trace(
r = as.matrix(won()[1,]),
theta = c("POS", "ATT", "GIPA","GOPA","AST","ONTA","OFTA","AIPA","AOPA","LC","LIC","CC","RIC","RC","TOR","IHOR","IWOR","IFOR",
"RBMD","ALB","CLB","ADLB","CDLB","YC","RDC","FA","OFF","PAS","PASC","CRO","CROC","SWOP","COR","FK","PS","GP","FT","DPA"),
showlegend = TRUE,
mode = "markers",
name = "Won"
) %>%
add_trace(
r = as.matrix(lost()[1,]),
theta = c("POS", "ATT", "GIPA","GOPA","AST","ONTA","OFTA","AIPA","AOPA","LC","LIC","CC","RIC","RC","TOR","IHOR","IWOR","IFOR",
"RBMD","ALB","CLB","ADLB","CDLB","YC","RDC","FA","OFF","PAS","PASC","CRO","CROC","SWOP","COR","FK","PS","GP","FT","DPA"),
showlegend = TRUE,
mode = "markers",
name = "Lost",
visible = "legendonly"
) %>%
layout (
polar = list(
radialaxis = list(
visible = T,
range = c(0,1)
)
),
showlegend = TRUE
)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
View(dfFIFA)
shinyApp(ui, server)
